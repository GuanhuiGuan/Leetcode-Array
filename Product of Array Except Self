class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] output = new int[n];
        output[0] = 1;//deliberately designed
        for(int i = 1; i < n; i++){//multiply forward for the prefix product
            output[i] = output[i - 1] * nums[i - 1];
        }
        
        int subPro = 1;//multiply backwards for the suffix product
        for(int i = n - 1; i >= 0; i--){
            output[i] *= subPro;
            subPro *= nums[i];
        }
        return output;
              
        
//         int n = nums.length;
//         int[][] dp = new int[n][n];//product of subarray row-to-column
//         //only propagate the upper right of the matrix
//         dp[0][0] = nums[0];//Initialize
//         dp[n - 1][n - 1] = nums[n - 1];
//         for(int i = 1; i < n; i++){//only need the first row and last column
//             dp[0][i] = dp[0][i - 1] * nums[i];
//             dp[n - 1 - i][n - 1] = dp[n - i][n - 1] * nums[n - 1 - i];
//         }
        
//         int[] output = new int[n];
//         output[0] = dp[1][n - 1];
//         output[n - 1] = dp[0][n - 2];
//         for(int i = 1; i < n - 1; i++){
//             output[i] = dp[0][i - 1] * dp[i + 1][n - 1];
//         }
//         return output;
    }
}
