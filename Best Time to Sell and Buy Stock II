class Solution {//my solution
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n < 2){return 0;}//In one day you can't earn anything
        int pro = 0;
        
        int low = prices[0];//find local min
        int high = prices[0];//find local max
        for(int i = 1; i < n; i++){
            if(high > prices[i] || i == n - 1){//found local max
                pro += Math.max(high, prices[i]) - low; 
                low = prices[i];//reset low
            }
            high = prices[i];//high always goes along the present state
            low = Math.min(low, prices[i]);//find local min 
        }
        return pro;
    }
}

//Simpller version
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int pro = 0;

        for(int i = 1; i < n; i++){
            if(prices[i] > prices[i - 1]){//sum up the positive rise of each climb
                pro += prices[i] - prices[i - 1];
            }
        }
        return pro;
    }
}
