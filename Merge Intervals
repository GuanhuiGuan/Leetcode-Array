/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.size() < 2)    return intervals;
        
        // sort
        intervals.sort((x, y) -> Integer.compare(x.start, y.start));
        
        // enumerate
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        List<Interval> re = new ArrayList<>();
        for(Interval item: intervals){
            if(end >= item.start){
                // itself could have larger end
                end = Math.max(item.end, end);
            }
            else{
                Interval temp = new Interval(start, end);
                re.add(temp);
                start = item.start;
                end = item.end;
            }
        }
        // last interval
        Interval temp = new Interval(start, end);
        re.add(temp);
        
        return re;
    }
}
